package com.javahelps.restservice.controller;

import com.google.gson.Gson;
import com.javahelps.restservice.repository.UserRepository;
import com.javahelps.restservice.entity.User;
import com.javahelps.restservice.response.JsonResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


@Controller
@RequestMapping("/api/user")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    //@PostMapping(path="/add") // Map ONLY GET Requests
    @RequestMapping(value="/add", method=RequestMethod.POST)
    public @ResponseBody ResponseEntity<String> addNewUser (@RequestBody User user) {

        String id = user.getEmail();
        Gson converter = new Gson();

        if(!userRepository.exists(id)) {
            userRepository.save(user);

            String data = "{ id: " + id + "}";

            JsonResponse responseObj = new JsonResponse(data, true, null);

            String responseString = converter.toJson(responseObj);
            return new ResponseEntity(responseString, HttpStatus.OK);
        }
        else{
            String error = "User with id:" + id + " already exists";
            JsonResponse responseObj = new JsonResponse(null, false, error);
            String responseString = converter.toJson(responseObj);

            return new ResponseEntity(responseString, HttpStatus.BAD_REQUEST);
        }
    }

    @RequestMapping(value="/delete", method=RequestMethod.POST)
    public @ResponseBody ResponseEntity<String> deleteUser(@RequestParam String id){
        Gson converter = new Gson();

        if(!userRepository.exists(id)){
            String error = "User with id:" + id + " does not exist";
            JsonResponse responseObj = new JsonResponse(null, false, error);
            String responseString = converter.toJson(responseObj);
            return new ResponseEntity<>(responseString, HttpStatus.BAD_REQUEST);
        }
        else{
            userRepository.delete(id);
            JsonResponse responseObj = new JsonResponse(null, true, null);
            String responseString = converter.toJson(responseObj);
            return new ResponseEntity<>(responseString, HttpStatus.OK);
        }
    }

    @RequestMapping(value="/update", method=RequestMethod.PUT)
    public @ResponseBody ResponseEntity<String> updateUser(@RequestBody User user){
        Gson convert = new Gson();

        String id = user.getEmail();
        if(!userRepository.exists(id)){
            String error = "User with id:" + id + " does not exist";
            JsonResponse responseObj = new JsonResponse(null, false, error);
            String responseString = convert.toJson(responseObj);
            return new ResponseEntity<>(responseString, HttpStatus.BAD_REQUEST);
        }
        else{
            User oldUser = userRepository.getOne(id);
            if(isForUpdate(oldUser, user)){
                userRepository.save(user);
                String data = "{ message: " + "\"User successfully updated\" }";
                JsonResponse responseObj = new JsonResponse(data, true, null);
                String responseString = convert.toJson(responseObj);
                return new ResponseEntity<>(responseString, HttpStatus.OK);
            }
            else {
                String data = "{ message: " + "\"Nothing to update\" }";
                JsonResponse responseObj = new JsonResponse(data, true, null);
                String responseString = convert.toJson(responseObj);
                return new ResponseEntity<>(responseString, HttpStatus.OK);
            }
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    private Boolean isForUpdate(User oldUser, User newUser){
        if(oldUser.getFirstName() == newUser.getFirstName() &&
                oldUser.getLastName() == newUser.getLastName() &&
                oldUser.getRole() == newUser.getRole()){
            return false;
        }
        return true;
    }
}
